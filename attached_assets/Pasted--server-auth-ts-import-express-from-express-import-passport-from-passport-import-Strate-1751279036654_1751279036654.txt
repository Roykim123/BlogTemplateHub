// server/auth.ts
import express from 'express';
import passport from 'passport';
import { Strategy as KakaoStrategy } from 'passport-kakao';
import session from 'express-session';
import cookieParser from 'cookie-parser';
import jwt from 'jsonwebtoken';
import { drizzle } from './db';
import { users } from '../shared/schema';

const router = express.Router();

// — 세션/쿠키 설정
router.use(cookieParser());
router.use(session({
  secret: process.env.SESSION_SECRET!,
  resave: false,
  saveUninitialized: false,
}));

// — Passport 초기화
router.use(passport.initialize());
router.use(passport.session());

// — JWT 생성 함수
function createToken(userId: string) {
  return jwt.sign({ userId }, process.env.JWT_SECRET!, { expiresIn: '1h' });
}

// — Kakao OAuth 전략 등록
passport.use(new KakaoStrategy({
  clientID: process.env.KAKAO_CLIENT_ID!,
  clientSecret: process.env.KAKAO_CLIENT_SECRET!,
  callbackURL: `${process.env.BASE_URL}/auth/kakao/callback`
}, async (accessToken, refreshToken, profile, done) => {
  try {
    const db = drizzle();
    const email = (profile._json.kakao_account as any).email as string;
    let [user] = await db.select().from(users).where(users.email.eq(email));
    if (!user) {
      const [newUser] = await db.insert(users).values({ email }).returning();
      user = newUser;
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.serializeUser((user: any, done) => done(null, user.id));
passport.deserializeUser(async (id: string, done) => {
  const db = drizzle();
  const [user] = await db.select().from(users).where(users.id.eq(id));
  done(null, user || null);
});

// — 로그인 라우트
router.get('/auth/kakao',
  passport.authenticate('kakao')
);

// — 콜백 라우트: JWT 발급 후 리다이렉트
router.get('/auth/kakao/callback',
  passport.authenticate('kakao', { failureRedirect: '/login' }),
  (req, res) => {
    const token = createToken((req.user as any).id);
    res.cookie('jwt', token, { httpOnly: true });
    res.redirect('/');
  }
);

// — JWT 보호 미들웨어
export function jwtMiddleware(req: any, res: any, next: any) {
  const token = req.cookies.jwt || req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).send({ error: '로그인 필요' });
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET!);
    req.user = (payload as any).userId;
    next();
  } catch {
    res.status(401).send({ error: '유효하지 않은 토큰' });
  }
}

export default router;
